<h1>OAuth</h1>
  
<p>Passing an <a href="http://oauth.net/">OAuth</a> token through the <code>Authorization</code> header can be 
achieved via the <code>patch headers</code> monkey patching function. This capability is demonstrated below using
the Twitter API as an example.</p>

<h2>Table for Twitter Timeline</h2>

<pre class="brush: sql; toolbar: false">
create table twitter.home
  on select get from 'https://api.twitter.com/1/statuses/home_timeline.{format}'
  using defaults format = 'json'
  using patch 'twitter.signin.js'
</pre>

<h2>Monkey Patch</h2>

<pre class="brush: sql; toolbar: false">
// Need Auth module
var OAuth = require('oauth').OAuth;

exports['patch headers'] = function(options) {
    var uri = options.uri,h = options.headers, params = options.params,
              statement = options.statement, consumerKey = '',
              consumerSecret = '', accessToken = '';

    consumerKey =  params.consumerkey;
    consumerSecret = params.consumersecret;
    accessToken = params.accesstoken;
    accessTokenSecret = params.accesstokensecret;

    var oa = new OAuth("https://api.twitter.com/oauth/request_token",
        "https://api.twitter.com/oauth/access_token",
        consumerKey,
        consumerSecret,
        "1.0",
        null,
        "HMAC-SHA1");

    var orderedParameters = oa._prepareParameters(accessToken,
        accessTokenSecret, "GET",
        "https://api.twitter.com/1/statuses/home_timeline.json");

    var authorization = oa._buildAuthorizationHeaders(orderedParameters);

    h["Authorization"] = authorization;

    return h;
};
</pre>

<p>In the above script <code>consumeKey</code>, <code>consumerSecret</code>,
<code>accessToken</code> and <code>accessTokenSecret</code> are user specific and can be obtained
from <a href="https://dev.twitter.com">https://dev.twitter.com</a> when you register an app.</p>

<h2>Sample Invocation</h2>

<h3>Passing Params via the Where Clause</h3>

<span class="try"><a class="button" href="/console?s=--%20Please%20make%20sure%20you%20provide%20following%204%20custom%20values%0Aconsumerkey%20%3D%20%22your%20consumer%20key%22%3B%0Aconsumersecret%20%3D%20%22your%20consumer%20secret%22%3B%0Aaccesstoken%20%3D%20%22your%20access%20token%22%3B%0Aaccesstokensecret%3D%20%22your%20access%20secret%22%3B%0Areturn%20select%20*%20from%20twitter.home%20where%20consumerkey%3D%22%7Bconsumerkey%7D%22%20and%0A%20%20%20%20%20%20%20consumersecret%20%3D%20%22%7Bconsumersecret%7D%22%20and%0A%20%20%20%20%20%20%20accesstoken%20%3D%20%22%7Baccesstoken%7D%22%20and%0A%20%20%20%20%20%20%20accesstokensecret%3D%22%7Baccesstokensecret%7D%22%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false">
-- Please make sure you provide following 4 custom values
consumerkey = "your consumer key";
consumersecret = "your consumer secret";
accesstoken = "your access token";
accesstokensecret= "your access secret";
return select * from twitter.home where consumerkey="{consumerkey}" and
       consumersecret = "{consumersecret}" and
       accesstoken = "{accesstoken}" and
       accesstokensecret="{accesstokensecret}"
</pre>

<h3>Passing Params via Headers</h3>

<p>Here is an alternative that sends the parameters as HTTP headers.</p>

<pre class="brush: sql; toolbar: false">
curl --header "consumerkey: your consumer key"
     --header "consumersecret: your consumer secret"
     --header "accesstoken: your access token"
     --header "accesstokensecret: your access secret"
     "https://hostname[:port]/q?s=select%20*%20from%20twitter.home"
</pre>





