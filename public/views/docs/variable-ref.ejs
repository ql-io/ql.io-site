<h1>Variable References</h1>
  
<p>A variable reference is a token in curly braces (<code>{token}</code>) in quoted (double or
single) strings. Tokens can be variables, or JSONPath style expressions.</p>
  
<p>Here is an example that uses simple variable references.</p>

<pre class="brush: sql; toolbar: false;">
a = true;
b = "{a}";
return b;
</pre>

<p>This script returns <code>true</code>.</p>

<p>Here is another example that uses several variable references.</p>

<span class="try"><a class="button" href="/console?s=a%20%3D%20true%3B%0Ab%20%3D%20%22b%22%3B%0Ac%20%3D%20%5B1%2C2%2C3%2C4%5D%3B%0Ad%20%3D%20%5B1%2C%20true%2C%203%2C%20false%5D%3B%0Ae%20%3D%20%7B%0A%20%20%22a%22%3A%20%22%7Ba%7D%22%2C%0A%20%20%22b%22%3A%20%22%7Bb%7D%22%2C%0A%20%20%22c%22%3A%20%5B%22%7Ba%7D%22%2C%20%22%7Bb%7D%22%2C%20%22%7Bc%7D%22%5D%2C%0A%20%20%22d%22%3A%20%22%7Bd%7D%22%0A%7D%3B%0Areturn%20e%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
a = true;
b = "b";
c = [1,2,3,4];
d = [1, true, 3, false];
e = {
  "a": "{a}",
  "b": "{b}",
  "c": ["{a}", "{b}", "{c}"],
  "d": "{d}"
};
return e;
</pre>

<h2>JSONPath Expressions</h2>

<p>You can use the following JSONPath style expressions in variable references.</p>

<p>Use dot notation to refer to fields in objects.</p>

<pre class="brush: sql; toolbar: false;">
a = {
 "b": {
   "c": "C"
 }
}
return "{a.b.c}";
</pre>

<p>This script returns <code>C</code>.</p>

<p>Here are some additional examples. These are all based on example from <a
href="http://goessner.net/articles/JsonPath/">JSONPath</a>.</p>

<span class="try"><a class="button" href="/console?s=store%20%3D%20%7B%0A%20%20%20%20%22book%22%3A%20%5B%20%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22reference%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Nigel%20Rees%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sayings%20of%20the%20Century%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.95%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Evelyn%20Waugh%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sword%20of%20Honour%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2012.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Herman%20Melville%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Moby%20Dick%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-553-21311-3%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22J.%20R.%20R.%20Tolkien%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22The%20Lord%20of%20the%20Rings%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-395-19395-8%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2022.99%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%2C%0A%20%20%20%20%22bicycle%22%3A%20%7B%0A%20%20%20%20%20%20%22color%22%3A%20%22red%22%2C%0A%20%20%20%20%20%20%22price%22%3A%2019.95%0A%20%20%20%20%7D%0A%20%20%7D%3B%0A%0Areturn%20%22%7Bstore.book%5B*%5D.author%7D%22%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
store = {
    "book": [
      { "category": "reference",
        "author": "Nigel Rees",
        "title": "Sayings of the Century",
        "price": 8.95
      },
      { "category": "fiction",
        "author": "Evelyn Waugh",
        "title": "Sword of Honour",
        "price": 12.99
      },
      { "category": "fiction",
        "author": "Herman Melville",
        "title": "Moby Dick",
        "isbn": "0-553-21311-3",
        "price": 8.99
      },
      { "category": "fiction",
        "author": "J. R. R. Tolkien",
        "title": "The Lord of the Rings",
        "isbn": "0-395-19395-8",
        "price": 22.99
      }
    ],
    "bicycle": {
      "color": "red",
      "price": 19.95
    }
  };
return "{store.book[*].author}";
</pre>
  
<p>This returns all the authors.</p>

<p>You can change the last line from the above example to the one below to get the same result</p>
  
<span class="try"><a class="button" href="/console?s=store%20%3D%20%7B%0A%20%20%20%20%22book%22%3A%20%5B%20%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22reference%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Nigel%20Rees%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sayings%20of%20the%20Century%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.95%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Evelyn%20Waugh%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sword%20of%20Honour%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2012.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Herman%20Melville%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Moby%20Dick%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-553-21311-3%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22J.%20R.%20R.%20Tolkien%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22The%20Lord%20of%20the%20Rings%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-395-19395-8%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2022.99%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%2C%0A%20%20%20%20%22bicycle%22%3A%20%7B%0A%20%20%20%20%20%20%22color%22%3A%20%22red%22%2C%0A%20%20%20%20%20%20%22price%22%3A%2019.95%0A%20%20%20%20%7D%0A%20%20%7D%3B%0A%0Areturn%20%22%7Bstore.%24..author%7D%22%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
return "{store.$..author}";
</pre>

<p>Use <code>$..</code> to find all values. The example below finds prices of all items.</p>

<span class="try"><a class="button" href="/console?s=store%20%3D%20%7B%0A%20%20%20%20%22book%22%3A%20%5B%20%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22reference%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Nigel%20Rees%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sayings%20of%20the%20Century%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.95%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Evelyn%20Waugh%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sword%20of%20Honour%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2012.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Herman%20Melville%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Moby%20Dick%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-553-21311-3%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22J.%20R.%20R.%20Tolkien%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22The%20Lord%20of%20the%20Rings%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-395-19395-8%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2022.99%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%2C%0A%20%20%20%20%22bicycle%22%3A%20%7B%0A%20%20%20%20%20%20%22color%22%3A%20%22red%22%2C%0A%20%20%20%20%20%20%22price%22%3A%2019.95%0A%20%20%20%20%7D%0A%20%20%7D%3B%0A%0Areturn%20%22%7Bstore.%24..price%7D%22%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
    return "{store.$..price}";
</pre>
  
<p>In general, you can use all expressions supported by JSONPath by using the following notation:</p>
  
<pre>
{name of the variable}.{JSONPath expression}
</pre>
  
<p>For instance, <code>store.$..book[?(@.isbn)]</code> applies the expression
<code>$..book[?(@.isbn)]</code> for the value of the variable <code>store</code>.</p>

<span class="try"><a class="button" href="/console?s=store%20%3D%20%7B%0A%20%20%20%20%22book%22%3A%20%5B%20%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22reference%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Nigel%20Rees%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sayings%20of%20the%20Century%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.95%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Evelyn%20Waugh%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Sword%20of%20Honour%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2012.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22Herman%20Melville%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22Moby%20Dick%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-553-21311-3%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%208.99%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20%22category%22%3A%20%22fiction%22%2C%0A%20%20%20%20%20%20%20%20%22author%22%3A%20%22J.%20R.%20R.%20Tolkien%22%2C%0A%20%20%20%20%20%20%20%20%22title%22%3A%20%22The%20Lord%20of%20the%20Rings%22%2C%0A%20%20%20%20%20%20%20%20%22isbn%22%3A%20%220-395-19395-8%22%2C%0A%20%20%20%20%20%20%20%20%22price%22%3A%2022.99%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%2C%0A%20%20%20%20%22bicycle%22%3A%20%7B%0A%20%20%20%20%20%20%22color%22%3A%20%22red%22%2C%0A%20%20%20%20%20%20%22price%22%3A%2019.95%0A%20%20%20%20%7D%0A%20%20%7D%3B%0A%0Areturn%20%22%7Bstore.%24..book%5B%3F(%40.isbn)%5D%7D%22%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
return "{store.$..book[?(@.isbn)]}";
</pre>
  
<p>JSONPath support in variable references allows you slice and dice deep collections. Here is a
script that returns a deep collection that has <code>ItemID</code>s at multiple levels.</p>
  
<pre class="brush: sql; toolbar: false;">
resp = select * from someDeepCollection;
ids = "{resp.$..ItemID}";
details = select * from someDeetails where id in ("{ids}");
</pre>
  
<p>TODO: Need a live example.</p>
  
<p>This script first gets the complete response of the collection, and then looks for
<code>ItemID</code>s. It then uses those IDs to find details. While the first statement involves a
network round-trip, the second statement happens in memory.</p>
  
<p>You can use similar tricks for APIs that return multiple collections. Imagine an API that returns
a person's friends and followers.</p>
  
<pre class="brush: sql; toolbar: false;">
person = select * from persons where id = 'someuser';
friends = "{person.friends}";
followers = "{person.followers}";
...
</pre>

<p>TODO: Need a live example.</p>
