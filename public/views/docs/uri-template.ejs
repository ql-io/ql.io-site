<h1>URI templates</h1>

<p>ql.io uses URI templates in <code>create table</code> statements. A URI template consists of
tokens embedded in curly braces. In the example below, the <code>create table</code> statement
refers to a a URI template with one tokenized parameter <code>{address}</code>.</p>

<pre class="brush: sql; toolbar: false">
create table geocoder
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={address}&sensor=true"
  resultset "results";
</pre>

<p>Values for tokens can be supplied from <code>where</code> clause, URI parameters, request
headers, or from <a href="/docs/configure">configuration</a>. With this example below, ql.io supplies
the value of <code>address</code> specified in the <code>where</code> clause while formatting the
URI template into a URI.</p>

<span class='try'><a class="button" href='/console?s=create%20table%20geocoder%20%0A%20%20on%20select%20get%20from%20%22http%3A%2F%2Fmaps.googleapis.com%2Fmaps%2Fapi%2Fgeocode%2Fjson%3Faddress%3D%7Baddress%7D%26sensor%3Dtrue%22%0A%20%20resultset%20%22results%22%3B%0Aselect%20address_components%5B0%5D.long_name%20from%20geocoder%20where%20address%20%3D%20%22Sammamish%2C%20WA%22'>Try me</a></span>
<pre class="brush: sql; toolbar: false">
select address_components[0].long_name from geocoder where address = 'Sammamish, WA'
</pre>

<h2>Types of Tokens</h2>

<p>ql.io uses a few special modifiers for each token.</p>

<h3>Required Tokens</h3>

<p>These are preceded by <code>^</code>. You can modifiy the URI template in the
above example to say that <code>address</code> is required to use this API.</p>

<span class='try'><a class="button" href='/console?s=create%20table%20geocoder%20%0A%20%20on%20select%20get%20from%20%22http%3A%2F%2Fmaps.googleapis.com%2Fmaps%2Fapi%2Fgeocode%2Fjson%3Faddress%3D%7B%5Eaddress%7D%26sensor%3Dtrue%22%0A%20%20resultset%20%22results%22%3B%0Aselect%20address_components%5B0%5D.long_name%20from%20geocoder%3B'>Try me</a></span>
<pre class="brush: sql; toolbar: false">
create table geocoder
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={^address}&sensor=true"
  resultset "results";
select address_components[0].long_name from geocoder;
</pre>

<p>When a token is marked as required, statements must include a value in the where clause, or as a
query parameter, or as a header, or specified in the config. If not, ql.io returns an error.</p>

<h3>Single-Valued Tokens</h3>

<p>By default every token can only have one value. When you supply multiple values for a token,
ql.io forks multiple requests to the API and join on the responses. Here is an example.</p>
  
<span class="try"><a class="button" href="/console?s=create%20table%20geocoder%20%0A%20%20on%20select%20get%20from%20%22http%3A%2F%2Fmaps.googleapis.com%2Fmaps%2Fapi%2Fgeocode%2Fjson%3Faddress%3D%7B%5Eaddress%7D%26sensor%3Dtrue%22%0A%20%20resultset%20%22%22%3B%0Aselect%20*%20from%20geocoder%20where%20address%20in%20('San%20Jose%2C%20CA'%2C%20'Palo%20Alto%2C%20CA'%2C%20'San%20Francisco%2C%20CA')%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false">
create table geocoder
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={^address}&sensor=true"
  resultset "";
select * from geocoder where address in
  ('San Jose, CA', 'Palo Alto, CA', 'San Francisco, CA');
</pre>

<p>In this case, ql.io makes three HTTP requests to the API, and merge the responses field by field
by default, and so, you will get a response like this:</p>

<pre class="brush: js; toolbar: false">
{
  "results": [
    {...},
    {...},
    {...}
  ],
  "status": [
    "OK",
    "OK",
    "OK"
  ]
}
</pre>
  
<p>You can prepend the token with a <code>#</code> in your <code>create table</code> statement to
let ql.io merge the results into a single array in stead.</p>

<span class="try"><a class="button" href="/console?s=create%20table%20geocoder%20%0A%20%20on%20select%20get%20from%20%22http%3A%2F%2Fmaps.googleapis.com%2Fmaps%2Fapi%2Fgeocode%2Fjson%3Faddress%3D%7B%23%5Eaddress%7D%26sensor%3Dtrue%22%0A%20%20resultset%20%22%22%3B%0Aselect%20*%20from%20geocoder%20where%20address%20in%20('San%20Jose%2C%20CA'%2C%20'Palo%20Alto%2C%20CA'%2C%20'San%20Francisco%2C%20CA')%3B">Try me</a></span>
<pre class="brush: sql; toolbar: false">
create table geocoder 
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={#^address}&sensor=true"
  resultset "";
select * from geocoder where address in ('San Jose, CA', 'Palo Alto, CA', 'San Francisco, CA');
</pre>

<p>Notice the difference in the response.</p>
  
<pre class="brush: js; toolbar: false">
[
  {
    "results": [],
    "status": "OK"
  },
  {
    "results": [],
    "status": "OK"
  },
  {
    "results": [],
    "status": "OK"
  }
]
</pre>
<h3>Multi-Valued Tokens</h3>

<p>If a token can have multiple values (separated by commas), prefix the name of the token by `|`.</p>

<p>In the example below, the second table uses a URI template that can tak upto <code>20</code> item
IDs.</p>

<!-- TODO -- The link below is timing out with Express/Connect -->
<pre class="brush: sql; toolbar: false">
    create table eBay.findItems
      on select get from
        "http://svcs.ebay.com/services/search/FindingService/v1?OPERATION-NAME=findItemsByKeywords&SERVICE-VERSION=1.8.0&GLOBAL-ID={globalid}&SECURITY-APPNAME={apikey}&RESPONSE-DATA-FORMAT={format}&REST-PAYLOAD&keywords={^keywords}&paginationInput.entriesPerPage={limit}&paginationInput.pageNumber={pageNumber}&outputSelector%280%29=SellerInfo&sortOrder={sortOrder}"
        using defaults format = "XML", globalid = "EBAY-US", sortorder = "BestMatch",
          apikey = "{config.eBay.apikey}", limit = 10, pageNumber = 1
      resultset "findItemsByKeywordsResponse.searchResult.item"

    create table eBay.itemDetails
      on select get from
      "http://open.api.ebay.com/shopping?callname=GetMultipleItems&responseencoding={format}&appid={^apikey}&version=715&IncludeSelector={includeSelector}&ItemID={20|itemId}"
      using defaults format='JSON', apikey="{config.eBay.apikey}"
      resultset "Item"

    ids = select itemId from eBay.findItems where keywords = "mini cooper" limit 2;
    return select * from eBay.itemDetails where itemId in ("{ids}");
</pre>

<p>As the URI template for the second table included <code>{20|itemId}</code>, if you supply more
than <code>20</code> IDs in the <code>in</code> clause, ql.io will automatically fork additional
requests to fetch items details in batches of <code>20</code>.</p>

<p>See <a href="/docs/reference/uri-template">URI Template Syntax Reference</a> for the
railroad diagrams.</p>
