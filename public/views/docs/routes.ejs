<h1>Script Routes</h1>
  
<p>A "route" is an HTTP interface that maps to a script stored in the <code>routes</code>
directory. In other words, a route is an extra level of indirection for stored scripts. For the
client, a route looks like any other HTTP resource. Here is an example from the <a
href="/docs/build-an-app">Build an App</a> guide.</p>

<pre class="brush: sql; toolbar: false">
prodid = select ProductID[0].Value from eBay.FindProducts where
    QueryKeywords = 'macbook pro';
details = select * from eBay.ProductDetails where
    ProductID in ('{prodid}') and ProductType = 'Reference';
reviews = select * from eBay.ProductReviews where
    ProductID in ('{prodid}') and ProductType = 'Reference';

return select d.ProductID[0].Value as id, d.Title as title,
    d.ReviewCount as reviewCount, r.ReviewDetails.AverageRating as rating
    from details as d, reviews as r
    where d.ProductID[0].Value = r.ProductID.Value
    via route '/myapi' using method get;
</pre>

<p>The client submits a request to the path <code>/myapi</code> to execute this script.</p>
  
<p>Some common use cases for routes include the following:</p>
  
<ol>
    <li>Your script is too long and sending it with every HTTP request introduces network
    overhead.</li>
    
    <li>You want to keep clients independent of the script. For instance, the client may be an iOS
    app, and you want to avoid the need to upgrade the app by users when the orchestration changes.
    </li>
    
    <li>You have an API and want to provide a simpler version of the API that removes some sensitive
    fields from the response.</li>
    
    <li>You have some legacy SOAP based APIs and want to provide a simpler HTTP based alternative
    serving JSON.</li>
</ol>

<p>Routing is the preferred method of executing scripts.</p>

<h2>HTTP Methods</h2>

<h3>POST (and PUT)</h3>
  
<p>A route can be declared to support any HTTP method. For instance the following route can only be
invoked using HTTP <code>POST</code> method.</p>

<pre class="brush: sql; toolbar: false">
prodid = select ProductID[0].Value from eBay.FindProducts where
    QueryKeywords = '{keywords}';
details = select * from eBay.ProductDetails where
    ProductID in ('{prodid}') and ProductType = 'Reference';
reviews = select * from eBay.ProductReviews where
    ProductID in ('{prodid}') and ProductType = 'Reference';

return select d.ProductID[0].Value as id, d.Title as title,
    d.ReviewCount as reviewCount, r.ReviewDetails.AverageRating as rating
    from details as d, reviews as r
    where d.ProductID[0].Value = r.ProductID.Value
    via route '/myapi' using method post;
</pre>

Assuming the server is running on the localhost, the following curl commands demonstrate how this
route can be invoked with different <code>POST</code> payloads.

</p><code>content-type: application/x-www-form-urlencoded</code></p>
<pre class="brush: sql; toolbar: false">
curl --header "content-type: application/x-www-form-urlencoded"
     -d "keywords=android" http://localhost:3000/myapi
</pre>

<p><code>content-type: application/json</code></p>
<pre class="brush: sql; toolbar: false">
curl --header "content-type: application/json"
     -d '{"keywords":"android"}' http://localhost:3000/myapi
</pre>

<p><code>content-type: application/xml</code></p>
<pre class="brush: sql; toolbar: false">
curl --header "content-type: application/xml"
     -d '<keywords>android</keywords>' http://localhost:3000/myapi
</pre>

<p>You can similarly define routes for <code>PUT</code> by specifying <code>'using method put'</code> in a route
definition similar to one given above.</p>

<h3>GET (and DELETE)</h3>

<p>Working off of the above examples, here are some examples of ways routes for <code>GET</code> could be defined.</p>

<h4>Parameters in the path</h4>
<pre class="brush: sql; toolbar: false">
prodid = select ProductID[0].Value from eBay.FindProducts where
    QueryKeywords = '{keyword}';
details = select * from eBay.ProductDetails where
    ProductID in ('{prodid}') and ProductType = 'Reference';
reviews = select * from eBay.ProductReviews where
    ProductID in ('{prodid}') and ProductType = 'Reference';

return select d.ProductID[0].Value as id, d.Title as title,
    d.ReviewCount as reviewCount, r.ReviewDetails.AverageRating as rating
    from details as d, reviews as r
    where d.ProductID[0].Value = r.ProductID.Value
    via route '/myapi/{keyword}' using method get;
</pre>

<pre class="brush: sql; toolbar: false">
curl http://localhost:3000/myapi/ipad
</pre>


<h4>Leveraging HTTP query params</h4>
<pre class="brush: sql; toolbar: false">
prodid = select ProductID[0].Value from eBay.FindProducts where
    QueryKeywords = '{keyword}';
details = select * from eBay.ProductDetails where
    ProductID in ('{prodid}') and ProductType = 'Reference';
reviews = select * from eBay.ProductReviews where
    ProductID in ('{prodid}') and ProductType = 'Reference';

return select d.ProductID[0].Value as id, d.Title as title,
    d.ReviewCount as reviewCount, r.ReviewDetails.AverageRating as rating
    from details as d, reviews as r
    where d.ProductID[0].Value = r.ProductID.Value
    via route '/myapi?keywords={keyword}' using method get;
</pre>

<pre class="brush: sql; toolbar: false">
curl http://localhost:3000/myapi?keyword=ipod
</pre>

<p>Path and query parameters as demonstrated can also be combined i.e. a sample route could be
<code>/myapi/{keyword}?type={type}</code> .

One can also define a similar route for HTTP requests with payloads (e.g. <code>POST</code> and <code>PUT</code>).</p>

<p>You can also define routes for HTTP method <code>DELETE</code> by <code>'using method delete'</code> in a
route definition similar to one given above.</p>

<h1>HTTP request : non idempotent usage</h1>
<p>If no values are specified in console, the default value of the input body would be req.body. </p>
<h2>Examples</h2>

<pre class="brush: sql; toolbar: false">
return insert into ebay.SellingManagerInventoryFolder
via route '/opaqueparam' using method post;
</pre>

</pre>
<pre class="brush: sql; toolbar: false">
--Please try the command in your terminal. Also you need the ebayauthtoken in the table for the route
curl -X POST -d '<AddSellingManagerInventoryFolderRequest xmlns="urn:ebay:apis:eBLBaseComponents"><ParentFolderID>4111589015</ParentFolderID><FolderName>HaderName><Comment>Folder For Harry Potter Products</Comment></AddSellingManagerInventoryFolderRequest>' http://localhost:3000/opaqueparam
</pre>

<h2>Optional Parameters</h2>

<h3>Required Tokens</h3>

We currently use the notion of required tokens which are preceded with ^.
In this example the parameters specified with ^ are required and all others are optional.

When applied to routes, an example might look like the following:

<pre class="brush: sql; toolbar: false">

-- Finds items on eBay based upon a keyword query and returns details for matching items.
return select *
from finditems where paginationInput.entriesPerPage = '{limit}' and keywords = '{keywords}'
via route '/ebay/finding/keywords?&paginationinputentriesperpage={limit}&keywords={^keywords}'
with optional params
using method get;
</pre>

<pre class="brush: sql; toolbar: false">
curl http://localhost:3000/ebay/finding/keywords?keywords=ipad
</pre>

<h3> Default Values on Routes </h3>

We can specify default values for any of the parameters passed as shown below. Here the output is limited to 1 item and if no keywords are specified then the default keyword is picked up as 'iphone'
<pre class="brush: sql; toolbar: false">

-- Finds items on eBay based upon a keyword query and returns details for matching items.
return select *
from finditems where paginationInput.entriesPerPage = '{limit}' and keywords = '{keywords}'
via route '/ebay/finding/keywords?&paginationinputentriesperpage={limit}&keywords={^keywords}'
with optional params
using defaults limit = 1, keywords = 'iphone'
using method get;
</pre>

<pre class="brush: sql; toolbar: false">
curl http://localhost:3000/ebay/finding/keywords
</pre>

The default values specified can be overwritten as well.

<pre class="brush: sql; toolbar: false">
curl http://localhost:3000/ebay/finding/keywords?limit=5&keywords=battery
</pre>

