<h1>Monkey Patching</h1>

<p>A monkey patch is a node module with the following functions exported. Each operation on a table
in a <code>create table</code> statement can have a patching module specified. Here is an
example.</p>

<pre class="brush: sql; toolbar: false;">
create table bing.search
  on select get from 'http://api.bing.net/xml.aspx?Appid={appid}&query={q}&sources=web'
            using defaults appid = '{config.bing.appid}'
            using patch 'bing.js'
            resultset 'SearchResponse.web:Web.web:Results.web:WebResult';
</pre>

<p>The patch module can be in the same directory as the table or any where in the node
<code>NODE_PATH</code>.</p>

<p>In the args below, <code>params</code> contains the following so that the patch could refer to
them.</p>
  
<ul>
    <li>output of previously executed statements</li>
    <li>request body, parsed into name value pairs</li>
    <li>params supplied to the route, if invoked via a route</li>
    <li>params from the connection (such as the remote address)</li>
    <li>defaults</li>
    <li>config</li>
</ul>

<h2>udf</h2>

<p>This function must return an object of user-defined functions. These functions can be used  to
extend <code>where</code> clauses of <code>select</code> statements.</p>

<p>Here is a script that uses user-defined functions.</p>
create table patch.udf on select get from 'http://my.host/path?p1={p1}&p2={p2}'
    using patch 'udf.js';
return select * from patch.udf where p1("v1") and p2("2", "3")
</p>

<pre class="brush: js; toolbar: false;">
exports['udf'] = function() {
    return {
        'p1' : function() {
            return 'v1'
        },
        'p2' : function(a, b) {
            return Number(a) + Number(b);
        }
    };
};
</pre>

<h2>validate param</h2>

<p>Use this function can validate a param supplied from one of the inputs (<code>where</code>
clause, URI params, headers or defaults).</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement and params, a param, and its value
exports['validate param'] = function(args, param, value) {
    // example
    switch(param) {
        case 'duration' :
            return !isNaN (value - 0)
        default:
            return true;
    }
}
</pre>
  
<h2>patch uri</h2>

<p>Use this function to introspect the URI of the outgoing request, and return a modified version
if necessary. You can also return an array of URIs to fork multiple requests.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri, and params
var MutableURI = require('ql.io-mutable-uri');
exports['patch uri'] = function(args) {
    // example
    return new MutableURI('some uri here');
}
</pre>

<h2>patch headers</h2>

<p>Use this function introspect and return updated request headers to be sent.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri and params
exports['patch headers'] = function(args) {
    // example
    var statement = args.statement, uri = args.uri, params = args.params,
        headers = args.headers;

    ..

    return headers;
}
</pre>

<h2>body template</h2>
  
<p>Use this function to provide a template for the request body.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri, params and headers
exports['body template'] = function(args) {
    // example
    var content = fs.readFileSync(__dirname + '/somefile.txt', 'utf8');
    return {
        type: 'application/xml',
        content: content
    };
}
</pre>

<h2>patch body</h2>

<p>Use this function to modify the request body.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri, params, body and headers
exports['patch body'] = function() {
    return {
        type: 'application/json',
        content: JSON.stringify({message : 'aok'})
    };
}
</pre>

<h2>patch status</h2>

<p>Use this to introspect the response body and indicate if it is an error.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch status'] = function(args) {
    var json = args.body;
    if(json && ((json.ack === 'Failure') ||
        json.errors)) {
        return 400;
    }
    else {
        return 200;
    }
}
</pre>

<h2>parse response</h2>

<p>Use this to parse response buffers into text. You can use this, for instance, to parse Avro and
such binary encoded responses.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
// body is an an array of Buffer objects

// This example just converts the buffers into a string.
exports['parse response'] = function(args) {
    var str = '';
    _.each(args.body, function(buf) {
        str += buf.toString('UTF-8');
    })
    return {
        type: 'application/json',
        content: str
    };
}

</pre>

<h2>patch response</h2>

<p>Use this to introspect and modify the response body.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch response'] = function(args) {
    var body = args.body;

    ... modify or create a new one

    return body;
}
</pre>

<h2>patch mediaType</h2>

<p>Use this function to override response media type.</p>

<pre class="brush: js; toolbar: false;">  
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch mediaType'] = function(args) {
    return 'application/json';
}
</pre>

