<h1>Monkey Patching</h1>

<p>Each operation on a table in a <code>create table</code> statement can have a "monkey patch"
module specified. A monkey patch is a node module that exports functions that can be used to extend
or modify various aspect of requests and responses. Here is an example.</p>

<pre class="brush: sql; toolbar: false;">
create table bing.search
  on select get from 'http://api.bing.net/xml.aspx?Appid={appid}&query={q}&sources=web'
            using defaults appid = '{config.bing.appid}'
            using patch 'bing.js'
            resultset 'SearchResponse.web:Web.web:Results.web:WebResult';
</pre>

<p>The patch module can be in the same directory as the table or any where in the node
<code>NODE_PATH</code>.</p>

<p>In the args below, <code>params</code> contains the following so that the patch could refer to
them.</p>
  
<ul>
    <li>output of previously executed statements</li>
    <li>request body, parsed into name value pairs</li>
    <li>params supplied to the route, if invoked via a route</li>
    <li>params from the connection (such as the remote address)</li>
    <li>defaults</li>
    <li>config</li>
    <li>log function. See below for details</li>
</ul>

<h2>validate param</h2>

<p>Use this function to validate a param supplied from one of the inputs (<code>where</code>
clause, URI params, headers or defaults).</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement and params, a param, and its value
exports['validate param'] = function(args, param, value) {
    // example
    switch(param) {
        case 'duration' :
            return !isNaN (value - 0)
        default:
            return true;
    }
}
</pre>
  
<h2>patch uri</h2>

<p>Use this function to introspect the URI of the outgoing request, and return a modified version
if necessary. You can also return an array of URIs to fork multiple requests.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri, and params
var MutableURI = require('ql.io-mutable-uri');
exports['patch uri'] = function(args) {
    // example
    return new MutableURI('some uri here');
}
</pre>

<h2>patch headers</h2>

<p>Use this function to introspect and return updated request headers to be sent.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri and params
exports['patch headers'] = function(args) {
    // example
    var statement = args.statement, uri = args.uri, params = args.params,
        headers = args.headers;

    ..

    return headers;
}
</pre>

<h2>body template</h2>
  
<p>Use this function to provide a template for the request body.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri, params and headers
exports['body template'] = function(args) {
    // example
    var content = fs.readFileSync(__dirname + '/somefile.txt', 'utf8');
    return {
        type: 'application/xml',
        content: content
    };
}
</pre>

<h2>patch body</h2>

<p>Use this function to modify the request body.</p>

<pre class="brush: js; toolbar: false;">
// Args: an object with statement, uri, params, body and headers
exports['patch body'] = function() {
    return {
        type: 'application/json',
        content: JSON.stringify({message : 'aok'})
    };
}
</pre>

<h2>patch status</h2>

<p>Use this to introspect the response body and indicate if it is an error.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch status'] = function(args) {
    var json = args.body;
    if(json && ((json.ack === 'Failure') ||
        json.errors)) {
        return 400;
    }
    else {
        return 200;
    }
}
</pre>

<h2>parse response</h2>

<p>Use this to parse response buffers into text. You can use this, for instance, to
  parse <a href="http://avro.apache.org/">Avro</a> and other binary encoded responses.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
// body is an an array of Buffer objects

// This example just converts the buffers into a string.
exports['parse response'] = function(args) {
    var str = '';
    _.each(args.body, function(buf) {
        str += buf.toString('UTF-8');
    })
    return {
        type: 'application/json',
        content: str
    };
}

</pre>

<h2>patch response</h2>

<p>Use this to introspect and modify the response body.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch response'] = function(args) {
    var body = args.body;

    ... modify or create a new one

    return body;
}
</pre>

<h2>patch mediaType</h2>

<p>Use this function to override the response media type.</p>

<pre class="brush: js; toolbar: false;">  
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch mediaType'] = function(args) {
    return 'application/json';
}
</pre>

<h2> compute key</h2>
<p> Use this patch to compute the key needed for caching.
The compute key patch is optional. If you don't provide the patch, the ql.io engine will compute the key based on the params passed during the table creation.
In many cases, the parameters are too many because of which the key might become too big. Hence you might want to provide your own cache key by applying a monkey patch.
Here is an example
</p>
<pre class="brush: sql; toolbar: false;">
'use strict';
exports['compute key'] = function (args) {
    var key = [];
    key.push(args.table);
    key.push(args.uri);
    key.push(args.params.siteid);
    return(key.join(':'));
};
</pre>
Please refer <a href="/docs/caching"> caching</a> for more details

<h1>Logging from Money Patch</h1>

<p> To log a message, use the `<code>log</code>` function in param <code>args</code>. <code>log</code> function
 takes two arguments - severity and the message to log. Severity can have the values - <code>'error', 'warn' and 'info' </code>.
 All other values for severity will be treated as <code>'info' </code>. </p>

<p>Here is an example.</p>

<pre class="brush: js; toolbar: false;">
// Args: An object with uri, params, statement, response status, response headers, and body
exports['patch status'] = function(args) {
    var log = args.log; // Get the logger fn.
    var json = args.body;
    if(!json) {
        log('warn', 'empty body'); // Warning message
    }
    if(json && ((json.ack === 'Failure') ||
        json.errors)) {
        log('error', 'error from upstream. fixing the status.'); // Error messsage
        return 400;
    }
    else {
        log('info', 'All is Well');
        return 200;
    }
}
</pre>
