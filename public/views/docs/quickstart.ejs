<h1>Quick Start</h1>

<p>The goal of this guide is to search for items using eBay's <a
href="http://developer.ebay.com/devzone/finding/Concepts/FindingAPIGuide.html">Finding API</a>, get
their details using the eBay <a
href="http://developer.ebay.com/devzone/shopping/docs/callref/GetMultipleItems.html">GetMultipleItems
API</a>, and then find their geo-locations using Google's <a
href="http://code.google.com/apis/maps/documentation/geocoding/">Geocoding API</a> all with a single
<code>select</code> statement</em> that makes <em><code>12</code> HTTP requests</em>. </p>

<p>Here is the list of the requests made in this exercise:</p>

<ol>
    <li>Send a request to the <a
    href="http://developer.ebay.com/devzone/finding/Concepts/FindingAPIGuide.html">Finding API</a>
    with a keyword to get <code>10</code> item IDs (<code>1</code> HTTP request)</li>

    <li>Send a request to the <a
    href="http://developer.ebay.com/devzone/shopping/docs/callref/GetMultipleItems.html">GetMultipleItems
    API</a> to find the details of all items found in the first step (<code>1</code> HTTP
    request)</li>

    <li>For each item found, send a request to the <a
    href="http://code.google.com/apis/maps/documentation/geocoding/">Geocoding API</a> with the
    text-form location found in the second step (<code>10</code> HTTP requests - one per
    address).</li>
</ol>
  
<p>The steps below use the <a href="/console">Web Console</a> on this site and no installation is
necessary.</p>

<h2>Step 1: Create Tables</h2>

<p>Copy and paste the following statements in the <a href="/console" target="_blank">Web
Console</a> to create tables for the above APIs.</p>

<pre class="brush: sql; toolbar: false;">
create table finditems
 on select get from 'http://svcs.ebay.com/services/search/FindingService/v1?OPERATION-NAME=findItemsByKeywords&SERVICE-VERSION=1.8.0&GLOBAL-ID={globalid}&SECURITY-APPNAME={apikey}&RESPONSE-DATA-FORMAT={format}&REST-PAYLOAD&keywords={^keywords}&paginationInput.entriesPerPage={limit}&paginationInput.pageNumber={pageNumber}&outputSelector%280%29=SellerInfo&sortOrder={sortOrder}'
   with aliases format = 'RESPONSE-DATA-FORMAT', json = 'JSON', xml = 'XML'
   using defaults format = 'XML', globalid = 'EBAY-US', sortorder ='BestMatch',
   apikey =  "{config.eBay.apikey}", limit = 10, pageNumber = 1
   resultset 'findItemsByKeywordsResponse.searchResult.item';

create table details
  on select get from "htttp://open.api.ebay.com/shopping?callname=GetMultipleItems&ItemID={itemId}&responseencoding={format}&appid={^apikey}&version=713&IncludeSelector=ShippingCosts"
     using defaults format = "JSON", apikey = "{config.eBay.apikey}"
     resultset 'Item';

create table google.geocode
  on select get from "http://maps.googleapis.com/maps/api/geocode/{format}?sensor=true&address={^address}"
    using defaults format = 'json'
    resultset 'results';
</pre>

<p>Each of these statements bind the above APIs into ql.io runtime as "tables".</p>

<h2>Step 2: Write Selects and Joins</h2>

<p>This exercise requires three steps. </p>

<ol>
    <li>Find items.</li>

    <li>Get the details, including free form location, of items found.</li>

    <li>Map free form locations into latitude, longitude values.</li>
</ol>

<p>Copy and paste the following statement below the <code>create table</code> statements in the
Web Console.</p>

<pre class="brush: sql; toolbar: false;">
select itemId from finditems where keywords='mini cooper';
</pre>
  
<p>This just selects IDs of items. In order to send these IDs to the details table, replace the
above <code>select</code> statement with the one below.</p>

<pre class="brush: sql; toolbar: false;">
select ItemID, ViewItemURLForNaturalSearch, Location from details where itemId in 
  (select itemId from finditems where keywords='mini cooper');
</pre>
  
<p>The next step is to send each <code>Location</code> field from the response to the Google
geocoding API to find their locations using a join.</p>

<pre class="brush: sql; toolbar: false;">

select e.ItemID, e.Title, e.ViewItemURLForNaturalSearch, g.geometry.location
    from details as e, google.geocode as g where
    e.itemId in (select itemId from finditems where keywords = 'mini cooper')
    and g.address = e.Location
</pre>

<p>Finally, add aliases to selected columns to make the response descriptive.</p>

<span class='try'><a class="button" href="/console?s=select%20e.ItemID%20as%20id%2C%20e.Title%20as%20title%2C%20e.ViewItemURLForNaturalSearch%20as%20url%2C%20g.geometry.location%20as%20latlng%0A%20%20from%20details%20%20as%20e%2C%20google.geocode%20as%20g%0A%20%20where%20e.itemId%20in%20(select%20itemId%20from%20finditems%20where%20keywords%20%3D%20'mini%20cooper')%0A%20%20and%20g.address%20%3D%20e.Location">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
select e.ItemID as id, e.Title as title, e.ViewItemURLForNaturalSearch as url, g.geometry.location as latlng
  from details  as e, google.geocode as g
  where e.itemId in (select itemId from finditems where keywords = 'mini cooper')
  and g.address = e.Location
</pre>
  
<p>This single statement gives the data for this use case as shown below.</p>

<pre id="ebay-goog-resp" class="live-demo-result">
</pre>
  
<script>

    function runQuery(url, t) {
        $(t).html('Running ...');
        $.ajax({
            type: 'GET',
            cache: false,
            dataType: 'jsonp',
            url: url,
            success: function (data) {
                try {
                    var formatter = new JSONFormatter();
                    $(t)[0].innerHTML = formatter.jsonToHTML(data);
                    $(t).treeview();
                }
                catch(e) {
                    alert(e);
                }
            },
            error: function (req, status, e) {
                $(t).html(e);
                $(t).animate({
                    opacity: 1.0
                });
            }

        });
        return false;
    }
    $(document).ready(function() {
        runQuery("/q?s=select%20e.ItemID%20as%20id%2C%20e.Title%20as%20title%2C%20e.ViewItemURLForNaturalSearch%20as%20url%2C%20g.geometry.location%20as%20latlng%0A%20%20from%20details%20%20as%20e%2C%20google.geocode%20as%20g%0A%20%20where%20e.itemId%20in%20(select%20itemId%20from%20finditems%20where%20keywords%20%3D%20'mini%20cooper')%0A%20%20and%20g.address%20%3D%20e.Location",
          '#ebay-goog-resp');
    });
</script>

