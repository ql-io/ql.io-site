<h1>How to Use Joins</h1>

<p>You can use joins in statements to join data from two HTTP resources at a time by using a join condition. Here is an example.</p>
<pre class="brush: sql">
select e.Title, e.ItemID, g.geometry.location 
from ebay.shopping.item as e, google.geocode as g
where e.itemId = 250894819626
  and g.address = e.Location
</pre>

<p>This statement combines two HTTP resources via the join condition <code>g.address = e.Location</code> resulting in a resultset like the following.</p>

<pre class="brush: js">
[
  [
    "Fun Minis - Springtime Sheep - Set of 50",
    "250894819626",
    {
      "lat": 37.7749295,
      "lng": -122.4194155
    }
  ]
]
</pre>

<p>Note the following differences from SQL:</p>

<ul>
<li>The <code>from</code> clause can not contain more than two tables. If you need to join from more than two, you can write multiple <code>select</code> statements each containing a join, and then do further joins on the results by using column aliases.</li>
<li>Tables in the <code>from</code> clause must be aliased using <code>as</code>.</li>
<li>The tables in the <code>from</code> clause must be ordered in the order of dependencies. In the above example, <code>ebay.shopping.item</code> provides data for <code>google.geocode</code> and hence must be listed first in the <code>from</code> clause.</li>
</ul>

<p>You can shape the response of this query by using column aliasing.</p>

<pre class="brush: sql">
select e.Title as title, e.ItemID as id, g.geometry.location as latng
from ebay.shopping.item as e, google.geocode as g
where e.itemId = 250894819626
  and g.address = e.Location
</pre>

<p>which results in</p>

<pre class="brush: js">
  {
    "title": "Fun Minis - Springtime Sheep - Set of 50",
    "id": "250894819626",
    "latng": {
      "lat": 44.8363889,
      "lng": 15.7580556
    }
  }
]
</pre>

<p>Here is another example.</p>

<pre class="brush: sql">
itemId = select itemId from ebay.finding.items where keywords = 'ferrari' limit 1;
item = select * from ebay.shopping.singleitem where itemId = '{itemId}';
tradingItem = select * from ebay.trading.getitem where itemId = '{itemId}';
return select i.BidCount as bids, ti.ListingDetails as details from item as i, tradingItem as ti where i.ItemID = ti.ItemID;
</pre>

<p>With the <code>return</code> statement joining <code>item</code> and <code>tradingItem</code>, you can expect a result set like the
following:</p>

<pre class="brush: js">
[
  {
    "bids": 8,
    "details": {
      "Adult": "false",
      "BindingAuction": "false",
      "CheckoutEnabled": "true",
      "ConvertedBuyItNowPrice": {
        "currencyID": "USD",
        "$t": "45000.0"
      },
      "ConvertedStartPrice": {
        "currencyID": "USD",
        "$t": "20000.0"
      },
      "HasReservePrice": "true",
      "StartTime": "2011-09-29T18:42:27.000Z",
      "EndTime": "2011-10-06T18:42:27.000Z",
      "ViewItemURL": "http://www.ebay.com/itm/2000-Ferrari-456-MGTA-RESERVE-LOWERED-456MGTA-456M-low-miles-Tubi-1-Owner-/300604864667",
      "HasUnansweredQuestions": "true",
      "HasPublicMessages": "false",
      "ViewItemURLForNaturalSearch": "http://www.ebay.com/itm/2000-Ferrari-456-MGTA-RESERVE-LOWERED-456MGTA-456M-low-miles-Tubi-1-Owner-/300604864667"
    }
  }
]
</pre>
