<h1>Examples</h1>

<blockquote>
    <code>git clone git@github.com:ql-io/ql.io-site.git</code> to see the scripts behind all the
    examples on this site.
</blockquote>

<h2>List Tables</h2>
  
<p>This statement lists all statically declared tables.</p>

<pre class="brush: sql toolbar: false;">
    show tables
</pre>

<h2>Describe a Table</h2>

<p>Describe a table. Comments before <code>create table</code> statements are used to generate
HTML. Such comments can be <a href="http://daringfireball.net/projects/markdown/">Markdown</a>
formatted.</p>

<span class="try"><a class="button" href="/console?s=describe%20eBay.ProductReviews">Try me</a></span>
<pre class="brush: sql toolbar: false;">
    describe eBay.ProductReviews
</pre>

<h2>Select with Where</h2>
  
<p>The conditions supplied in the <code>where</code> clause become inputs to HTTP request URIs,
headers, or body.</p>

<span class="try"><a class="button" href="/console?s=select%20*%20from%20google.geocode%20where%20address%20%3D%20%22bora%20bora%22">Try me</a></span>
<pre class="brush: sql toolbar: false;">
select * from google.geocode where address = "bora bora"
</pre>

<h2>Columns Clause for Projections</h2>

<p>Columns clause is used to project the response to just the desired fields. </p>

<span class="try"><a class="button" href="/console?s=select%20ProductID%5B0%5D.Value%2C%20DetailsURL%2C%20StockPhotoURL%20%0A%20%20from%20eBay.FindProducts%20where%20QueryKeywords%3D%22mini%20cooper%22">Try me</a></span>
<pre class="brush: sql toolbar: false;">
select ProductID[0].Value, DetailsURL, StockPhotoURL
  from eBay.FindProducts where QueryKeywords="mini cooper"
</pre>    
  
<p>The result of a <code>select</code> with columns clause is an array of array of fields
selected. Column names can use <a href="http://github.com/s3u/JSONPath">JSONPath</a> format.</p>
  
<h2>Columns Aliases</h2>
  
<p>Column aliases change the format of the row in the results to be an object.</p>

<span class="try"><a class="button" href="/console?s=select%20ProductID%5B0%5D.Value%20as%20id%2C%20DetailsURL%20as%20details%2C%20StockPhotoURL%20as%20photo%0A%20%20from%20eBay.FindProducts%20where%20QueryKeywords%3D%22mini%20cooper%22">Try me</a></span>
<pre class="brush: sql toolbar: false;">
select ProductID[0].Value as id, DetailsURL as details, StockPhotoURL as photo
  from eBay.FindProducts where QueryKeywords="mini cooper"
</pre>

<h2>Limit and Offset</h2>

<p>You can paginate results by using limit and offset clauses.</p>

<span class="try"><a class="button" href="/console?s=select%20id%20as%20id%2C%20from_user_name%20as%20user%2C%20text%20as%20text%0A%20%20from%20twitter.search%20where%20q%20%3D%20%22ql.io%22%20limit%205%20offset%202">Try me</a></span>
<pre class="brush: sql toolbar: false;">
select id as id, from_user_name as user, text as text
  from twitter.search where q = "ql.io" limit 5 offset 2
</pre>

<h2>Dependencies</h2>

<p>The second statement depends on the first statement via the <a href="/docs/variable-ref">variable
reference</a> <code>{minis.itemId}</code>.</p>

<span class="try"><a class="button" href="/console?s=minis%20%3D%20select%20*%20from%20finditems%20where%20keywords%20%3D%20'mini%20cooper'%20limit%2010%3B%0Areturn%20select%20PictureURL%20from%20details%20where%20itemId%20%3D%20%22%7Bminis.itemId%7D%22%3B">Try me</a></span>
<pre class='brush: sql toolbar: false;'>
minis = select * from finditems where keywords = 'mini cooper' limit 10;
return select PictureURL from details where itemId = "{minis.itemId}";
</pre>
  
<p>These statements will be executed in sequence due to the dependency of the second statement on
the outcome of the first.</p>

<h2>Nested Selection and Joins</h2>

<p>See <a href='/docs/quickstart'>Quick Start Guide</a> to construct this in steps.</p>

<span class="try"><a class="button" href="/console?s=select%20e.ItemID%20as%20id%2C%20e.Title%20as%20title%2C%20e.ViewItemURLForNaturalSearch%20as%20url%2C%20g.geometry.location%20as%20latlng%0A%20%20from%20details%20%20as%20e%2C%20google.geocode%20as%20g%0A%20%20where%20e.itemId%20in%20(select%20itemId%20from%20finditems%20where%20keywords%20%3D%20%22iPad%22)%0A%20%20%20%20%20%20%20%20and%20g.address%20%3D%20e.Location">Try me</a></span>
<pre class="brush: sql toolbar: false;">
select e.ItemID as id, e.Title as title, e.ViewItemURLForNaturalSearch as url, g.geometry.location as latlng
  from details  as e, google.geocode as g
  where e.itemId in (select itemId from finditems where keywords = "iPad")
        and g.address = e.Location
</pre>

<h2>JSON</h2>
  
<p>The right hand side of a variable assignment can also be an object.</p>

<span class="try"><a class="button" href="/console?s=foo%20%3D%20%7B%0A%20%20%22fname%22%20%3A%20%22Hello%22%2C%0A%20%20%22lname%22%20%3A%20%22World%22%2C%0A%20%20%22place%22%20%3A%20%22Sammamish%2C%20WA%22%7D%3B%0Adata%20%3D%20select%20fname%2C%20lname%2C%20place%20from%20foo%3B%0Areturn%20%7B%0A%20%20%22data%22%20%3A%20%20%22%7Bdata%7D%22%0A%7D%3B">Try me</a></span>
<pre class='brush: sql toolbar: false;'>
foo = {
  "fname" : "Hello",
  "lname" : "World",
  "place" : "Sammamish, WA"};
data = select fname, lname, place from foo;
return {
  "data" :  "{data}"
};
</pre>
  
<p>In this example, the value <code>foo</code> is a JSON object. Here is another example that uses
a JSONPath based selector.</p>

<span class="try"><a class="button" href="/console?s=people%20%3D%20%5B%0A%20%20%7B%22fname%22%20%3A%20%22John%22%2C%20%22lname%22%20%3A%20%22Doe%22%7D%2C%0A%20%20%7B%22fname%22%20%3A%20%22Jane%22%2C%20%22lname%22%20%3A%20%22Doe%22%7D%2C%0A%20%20%7B%22fname%22%20%3A%20%22Joe%22%2C%20%22lname%22%20%3A%20%22Developer%22%7D%5D%3B%0Areturn%20%22%7Bpeople.%24..fname%7D%22">Try me</a></span>
<pre class='brush: sql toolbar: false;'>
    people = [
      {"fname" : "John", "lname" : "Doe"},
      {"fname" : "Jane", "lname" : "Doe"},
      {"fname" : "Joe", "lname" : "Developer"}];
    return "{people.$..fname}"
</pre>

<p>The selector in the <code>return</code> statement looks for all <code>fname</code> fields.</p>
  
<h2>Insert</h2>

<p>This examples uses <code>insert into</code> to shorten a URL via bitly APIs.</p>

<span class="try"><a class="button" href="/console?s=insert%20into%20bitly.shorten%20(longUrl)%20values%20('http%3A%2F%2Fql.io%2Fdocs')">Try me</a></span>
<pre class='brush: sql toolbar: false;'>
insert into bitly.shorten (longUrl) values ('http://ql.io/docs')
</pre>

<p>A <code>select</code> statement can be used to get the long form.</p>

<span class="try"><a class="button" href="/console?s=select%20long_url%20from%20bitly.shorten%20where%20shortUrl%20%3D%20'http%3A%2F%2Fbit.ly%2FuZIvmY'">Try me</a></span>
<pre class='brush: sql toolbar: false;'>
select long_url from bitly.shorten where shortUrl = 'http://bit.ly/uZIvmY'
</pre>

<h2>SOAP</h2>
  
<p>This example uses Bing's search API.</p>

<span class="try"><a class="button" href="/console?s=select%20*%20from%20bing.soap.search%20where%20q%20%3D%20%22ql.io%22">Try me</a></span>
<pre class='brush: sql toolbar: false;'>
select * from bing.soap.search where q = "ql.io";
</pre>

<h2>Mixing Twitter and Bing</h2>

<p>This example uses Bing's search API.</p>

<span class="try"><a class="button" href="/console?s=keyword%20%3D%20%22ql.io%22%3B%0Aweb%20%3D%20select%20*%20from%20bing.search%20where%20q%20%3D%20%22%7Bkeyword%7D%22%3B%0Atweets%20%3D%20select%20id%20as%20id%2C%20from_user_name%20as%20user_name%2C%20text%20as%20text%0A%20%20from%20twitter.search%20where%20q%20%3D%20%22ql.io%22%3B%0A%20%0Areturn%20%7B%0A%20%20%22keyword%22%3A%20%22%7Bkeyword%7D%22%2C%0A%20%20%22web%22%3A%20%22%7Bweb%7D%22%2C%0A%20%20%22tweets%22%3A%20%22%7Btweets%7D%22%0A%7D">Try me</a></span>
<pre class="brush: sql; toolbar: false;">
keyword = "ql.io";
web = select * from bing.search where q = "{keyword}";
tweets = select id as id, from_user_name as user_name, text as text
  from twitter.search where q = "ql.io";

return {
  "keyword": "{keyword}",
  "web": "{web}",
  "tweets": "{tweets}"
}
</pre>
